(require 2htdp/universe)
(require 2htdp/image)

; A Ball is a (make-ball Nat Mode Color [Nat -> Posn])
(define-struct ball (r mode color placement))
; - where r is the ball's radius
; - mode is the ball's mode
; - color is the ball's color
; - and placement is a function that, given the current time,
;   outputs a new coordinate for the ball to be drawn at

; A Mode is one of:
; - 'solid
; - 'outline

(define HEIGHT 500)
(define WIDTH 500)
(define EMPTY (empty-scene HEIGHT WIDTH))
(define BALL-1 (make-ball 5 'solid 'red (λ (t) (make-posn 20 (modulo t HEIGHT)))))
(define BALL-2 (make-ball 7 'outline 'blue (λ (t) (make-posn (modulo t WIDTH) 100))))

; ball-temp : Ball -> ???
#; (define (ball-temp b)
     (... (ball-r b) ... (mode-temp (ball-mode b)) ...
          (ball-color b) ... (ball-placement b) ...))

; mode-temp : Mode -> ???
#; (define (mode-temp m)
     (... (cond [(symbol=? m 'solid) ...]
                [(symbol=? m 'outline) ...]) ...))

; A World is a (make-world Nat [List-of Ball])
(define-struct world (t balls))
; - where t is the amount of time that has passed
; - and balls is the balls of the world

(define WORLD-1 (make-world 0 '()))
(define WORLD-2 (make-world 10 (list BALL-1 BALL-2)))

; world-temp : World -> ???
#;(define (world-temp w)
    (... (world-t w) ... (ball-list-temp (world-balls w)) ...))

; ball-list-temp : [List-of Ball] -> ???
#;(define (ball-list-temp alob)
    (... (cond [(empty? alob) ...]
               [(cons? alob)
                ... (ball-temp (first alob)) ...
                ... (ball-list-temp (rest alob)) ...]) ...))


; main : [List-of Ball] -> World
; Run this game with this list of initial balls
(define (main init-list)
  (big-bang (make-world 0 init-list)
            [on-tick tick]
            [to-draw draw]
            [on-mouse place-ball]
            [on-key key-things]))


;; World -> World
;; Increases time by one
(check-expect (tick WORLD-2) (make-world 15 (list BALL-1 BALL-2)))

(define (tick a-world)
  (make-world (+ 5 (world-t a-world)) (world-balls a-world)))


;; Ball Posn Image -> Image
;; Draws a given ball at the specified point on a given image

(check-expect (draw-ball BALL-1 (make-posn 20 50) EMPTY)
              (place-image (circle 5 "solid" "red") 20 50 EMPTY))

(define (draw-ball ball a-posn img)
  (place-image (circle (ball-r ball) (ball-mode ball) (ball-color ball))
               (posn-x a-posn) (posn-y a-posn) img))

;; make-drawer: Time -> [Ball Image -> Image]
;; Makes a function that draws an image given a time

(check-expect ((make-drawer 5) BALL-1 EMPTY)
              (draw-ball BALL-1 ((ball-placement BALL-1) 5) EMPTY))

(define (make-drawer t)
  (lambda (a-ball a-img) (draw-ball a-ball ((ball-placement a-ball) t) a-img)))

; draw: World -> Image
; Renders image of the world

(check-expect (draw WORLD-2)
              (place-image (circle 5 'solid 'red) 20 10
                           (place-image (circle 7 'outline 'blue) 10 100 EMPTY)))

(define (draw a-world)
  (foldr (make-drawer (world-t a-world)) EMPTY (world-balls a-world)))

; A BallGenerator is a [Nat Nat Nat -> [Nat -> Posn]]
; Given the time, x-coordinate, and y-coordinate of when and where a
; ball is created, create a function that, given the current time of
; the world, will output a Posn
 
; Example:
; move-horizontally : BallGenerator
(check-expect ((move-horizontally 3 5 8) 10) 
              (make-posn 12 8))

(define (move-horizontally t0 x0 y0)
  (λ (t) (make-posn (modulo (+ x0 (- t t0)) WIDTH) y0)))

; move-vertically: Ball-Generator
; Creates a ball generator that moves balls vertically

(check-expect ((move-vertically 3 5 8) 10)
              (make-posn 5 15))

(define (move-vertically t0 x y)
  (lambda (t) (make-posn x (modulo (+ y (- t t0)) HEIGHT))))

(define (move-up t0 x y)
  (lambda (t) (make-posn x (modulo (- y (- t t0)) HEIGHT))))

(define (move-left t0 x y)
  (lambda (t) (make-posn (modulo (- x (- t t0)) WIDTH) y)))

(define (move-diag t0 x y)
  (lambda (t) (make-posn (modulo (+ x (- t t0)) WIDTH) (modulo (- y (- t t0)) HEIGHT))))

(define GENERATORS (list move-horizontally move-vertically move-left move-up move-diag))

;; place-ball: World Natural Natural MouseEvent -> World
;; Renders the given ball onto World at the given x and y positions

#;(check-expect (place-ball WORLD-2 5 10 "button-down")
              (make-world 10 (list (make-ball 10 'solid 'salmon
                                              ...)
                                   BALL-1 BALL-2)))

(define (place-ball a-world x y me)
  (cond
    [(string=? me "move") (make-world (world-t a-world) (cons (make-ball (random 25) (select-random '(solid outline))
                                                                                (select-random loc)
                                                 ((select-random GENERATORS) (world-t a-world) x y))
                                      (world-balls a-world)))]
    [else a-world]))

; select-random: [NEList-of X] -> X
; Picks a random element of a list

#;(check-random (select-random '(2 5 7 3 3)) 7)

(define (select-random a-list)
  (local ((define len (random (length a-list)))

          ; [NEList-of X] Number -> X
          ; If Number is 0, returns first of list, otherwise goes to the next element and sub1 of Number

          (define (select-random/a a-list-2 n)
            (cond
              [(= n 0) (first a-list-2)]
              [else (select-random/a (rest a-list-2) (sub1 n))])))
    (select-random/a a-list len)))

(define loc '("salmon" "crimson" "rosybrown" "snow" "peru" "yellow" "seashell" "olivedrab" "lime" "palegreen"
                       "turquoise" "honeydew" "mintcream" "lightslategray" "purple" "dimgray"
                       "deepskyblue" "red"))

(define (key-things world key)
  (cond
    [(equal? key " ") (make-world 0 '())]
    [else world]))
